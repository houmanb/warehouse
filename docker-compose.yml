services:
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  warehouse-api:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # HTTP workflow tests
  workflow-tests:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    depends_on:
      warehouse-api:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    command: ["python", "-m", "pytest", "test_warehouse_workflow.py", "-v", "--tb=short", "--color=yes"]
    profiles:
      - test

  # Client library tests  
  client-tests:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    depends_on:
      warehouse-api:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    command: ["python", "-m", "pytest", "test_warehouse_client.py", "-v", "--tb=short", "--color=yes"]
    profiles:
      - test

  # All tests combined
  all-tests:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    depends_on:
      warehouse-api:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    command: ["python", "-m", "pytest", "test_warehouse_workflow.py", "test_warehouse_client.py", "-v", "--tb=short", "--color=yes"]
    profiles:
      - test

  # Quick smoke tests
  smoke-tests:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    depends_on:
      warehouse-api:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    command: ["python", "-c", "import requests; r=requests.get('http://warehouse-api:8000/health'); assert r.json()['ok']; print('Health check passed')"]
    profiles:
      - test

  # MCP Server for AI assistant integration
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    depends_on:
      warehouse-api:
        condition: service_healthy
    environment:
      - API_BASE_URL=http://warehouse-api:8000
      - AGENT_ROLE=fulfillment
      - CONTAINER_MODE=true
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://warehouse-api:8000/health').raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    ports:
      - "8001:8001"

  # Mesa simulation
  mesa-simulation:
    build:
      context: .
      dockerfile: Dockerfile.mesa
    depends_on:
      warehouse-api:
        condition: service_healthy
    environment:
      - WAREHOUSE_URL=http://warehouse-api:8000
      - LOG_LEVEL=DEBUG
      - NUM_CUSTOMERS=20
      - NUM_FULFILLMENT_AGENTS=10
      - ENABLE_SHIFT_PATTERNS=false
      - ENABLE_INVENTORY_CONSTRAINTS=false
      - ENABLE_OPERATIONAL_DISRUPTIONS=false
      - SIMULATION_SPEED_FACTOR=0.05
    ports:
      - "8521:8521"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8521/"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    profiles:
      - simulation
    restart: unless-stopped
    command: ["solara", "run", "warehouse_simulation.py", "--host", "0.0.0.0", "--port", "8521"]

networks:
  default:
    name: warehouse-network
